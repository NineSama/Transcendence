I) General: 

- Single-page application. The user should be able to use the
Back and Forward buttons of the browser

- Compatible with the latest stable up-to-date version of
Mozilla Firefox (Can be compatible with other web browsers)

- The user should encounter no unhandled errors or warnings when browsing the
website

- Docker to run your website. Everything must be launched with a
single command line to run an autonomous container. (See subject for details and constraints)

a) Frontend:

- Tailwind CSS in addition of the Type-script, and nothing else

b) Backend:

- Fastify with Node.js

- Database: SQLite

II) Game:

- Users must be able to participate in a live Pong game against another player directly
on the website. Both players will use the same keyboard. (The Remote players
module can enhance this functionality with remote players)

- Tournament system should also be available (display who is playing against whom and the order
of the play)

- A registration system is required: at the start of a tournament, each player must
input their alias. The aliases will be reset when a new tournament begins
(can be modified using the Standard User Management module)

- There must be a matchmaking system: the tournament system should organize
the matchmaking of the participants, and announce the next match

- All players must adhere to the same rules, including having identical paddle speed.
This requirement also applies when using AI

- The game must adhere to the default frontend constraints (as outlined above), or
you may choose to use the FrontEnd module, or override it with the Graphics
module. While the visual aesthetics can vary, the game must still capture the
essence of the original Pong (1972)

III) Security concerns

- Any password stored in your database, if applicable, must be hashed

- Your website must be protected against SQL injections/XSS attacks

- If you have a backend or any other features, it is mandatory to enable an HTTPS
connection for all aspects (use wss instead of ws for example)

- You must implement validation mechanisms for forms and any user input, either on
the base page if no backend is used, or on the server side if a backend is employed

- Regardless of whether you choose to implement the JWT Security module with
2FA, itâ€™s essential to prioritize the security of your website. For instance, if you
choose to create an API, ensure your routes are protected. Even if you decide not
to use JWT tokens, securing the site remains critical

- Any credentials, API keys, env variables etc., must be saved locally in a .env file 
and ignored by git

IV) Modules

7 major modules is required
Two Minor Modules count as one Major Module

Web) 

Major module:

- Use a framework to build the backend

Minor module: 

- Use a framework or a toolkit to build the frontend
- Use a database for the backend

User management) 

Major module: 

- Standard user management, authentication, users across tournaments

Devops)

Major module: 

- Designing the backend as microservices

Gameplay and user experience)

Major module: 

- Add another game with user history and matchmaking

- Live chat

(Minor: 

- Game customization options)

Cybersecurity) 

Major modules: 

- Implement Two-Factor Authentication (2FA) and JWT